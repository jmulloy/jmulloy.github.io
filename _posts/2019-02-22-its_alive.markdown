---
layout: post
title:      "IT'S ALIVE"
date:       2019-02-22 13:16:04 +0000
permalink:  its_alive
---


Building apps and writing code is what we do as developers on a daily basis. However just because we build an app and write hundreds or thusands of lines of code doesnt mean the world will be able to access it or even use the app. Most developers will leave notes for other developers to read through on how to access the data, start servers, run scripts, etc. This is great for other developers or engineers. However, this doesnt mean the average individual with zero experience will understand how to use the application or even get it running to see what the app can do. This is where Deployment comes in to play. Heroku provides developers with an easy to use deployment process that allows beginner level programmers deploy, manage, and scale their apps for the world to see/use. 

The process of deploying to Heroku can be intidimidating for those who havent done it before or at least it was for me. One of the first steps I needed to do was to update my version of ruby. I previously was using `rvm 2.3.3` but any version higher than that one. I ran the  `rvm install 2.5.3`. After updating the ruby version was updated, I need to change a few of the gems in my rails application. First gem I changed was the `gem "sqlite3"` to the `gem "pg"`. Just like any other time the gem files is altered, the next step was to run `bundle install` to make sure those gem dependencies were installed and accessible in the application. 

After reading through the documentation on the heroku website, I realized I needed to to alter my `database.yml` to work with Heroku. I replaced the contents of the file with the following documentation:
```
# PostgreSQL. Versions 9.1 and up are supported.
#
# Install the pg driver:
#   gem install pg
# On OS X with Homebrew:
#   gem install pg -- --with-pg-config=/usr/local/bin/pg_config
# On OS X with MacPorts:
#   gem install pg -- --with-pg-config=/opt/local/lib/postgresql84/bin/pg_config
# On Windows:
#   gem install pg
#       Choose the win32 build.
#       Install PostgreSQL and put its /bin directory on your path.
#
# Configure Using Gemfile
# gem 'pg'
#
default: &default
  adapter: postgresql
  encoding: unicode
  # For details on connection pooling, see Rails configuration guide
  # http://guides.rubyonrails.org/configuring.html#database-pooling
  pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>

development:
  <<: *default
  host: localhost
  database: myapp_development

  # The specified database role being used to connect to postgres.
  # To create additional roles in postgres see `$ createuser --help`.
  # When left blank, postgres will use the default role. This is
  # the same name as the operating system user that initialized the database.
  #username: myapp

  # The password associated with the postgres role (username).
  #password:

  # Connect on a TCP socket. Omitted by default since the client uses a
  # domain socket that doesn't need configuration. Windows does not have
  # domain sockets, so uncomment these lines.
  #host: localhost

  # The TCP port the server listens on. Defaults to 5432.
  # If your server runs on a different port number, change accordingly.
  #port: 5432

  # Schema search path. The server defaults to $user,public
  #schema_search_path: myapp,sharedapp,public

  # Minimum log levels, in increasing order:
  #   debug5, debug4, debug3, debug2, debug1,
  #   log, notice, warning, error, fatal, and panic
  # Defaults to warning.
  #min_messages: notice

# Warning: The database defined as "test" will be erased and
# re-generated from your development database when you run "rake".
# Do not set this db to the same as development or production.
test:
  <<: *default
  host: localhost
  database: myapp_test

# As with config/secrets.yml, you never want to store sensitive information,
# like your database password, in your source code. If your source code is
# ever seen by anyone, they now have access to your database.
#
# Instead, provide the password as a unix environment variable when you boot
# the app. Read http://guides.rubyonrails.org/configuring.html#configuring-a-database
# for a full rundown on how to provide these environment variables in a
# production deployment.
#
# On Heroku and other platform providers, you may have a full connection URL
# available as an environment variable. For example:
#
#   DATABASE_URL="postgres://myuser:mypass@localhost/somedatabase"
#
# You can use this database configuration with:
#
#   production:
#     url: <%= ENV['DATABASE_URL'] %>
#
production:
  <<: *default
  database: myapp_production
  username: myapp
  password: <%= ENV['MYAPP_DATABASE_PASSWORD'] %>
```
You will notice that the database files for production have been altered to have myapp_production, development, etc. This is needed for the application to be able to run on the kerokju deployment and not need local server running within the terminal. After these files have been updated I needed to update the database that my app was going to utilize. This was achieved by running `rails db:create` and then `rails db:migrate`. After this was done, I merged by 2 heroku branch to the master branch to deploy through heroku. After successfully merging the branches I was able to deploy the app, update the url for the app on Github, and now anyone who chooses to, can access the app from GitHub.
