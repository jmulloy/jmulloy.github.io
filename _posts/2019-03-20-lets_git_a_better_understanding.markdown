---
layout: post
title:      "Let's Git A Better Understanding"
date:       2019-03-20 08:54:50 -0400
permalink:  lets_git_a_better_understanding
---


Github is a very useful tool/platform that programmers, engineers, and developers use across the entire world. For those that aren’t too familiar with Github, think of it as a central hub for repositories where different projects can live. An easier way to think about it is as a library for all things related but not limited to web applications from a code perspective. Github can be very useful for individuals, groups, organizations, and businesses to offer a common space for individual people to contribute, edit, remove, update different parts or entire applications. Now that we have a better understanding of what actual platform can do, we can  move into the complexity and awesome details of why Github is first choice for most developers. 

Github can allow anybody to access different parts of applications as long as they are able to access the internet. However that doesn't mean everybody needs to be able to access the entire application. One aspect I found helpful was understanding the foundation of utilizing branches inside of the code repository. Github Branches allow programmers to work on specific pieces of the application without potentially manipulating the app in real time. Let's dig a little deeper. When a developer creates a new branch in the repo, imagine it like being able to make a clone of the application, or repo you are working on, be able to change a few things, and then save without actually alternating the state of the application. So let's say you have been tasked with updating the Rails API or a React Application. You will want to create your own branch in the repo in order to start manipulating the existing code for the Rails API side of the application. In order to create a new branch in Github, there are a few code commands that we can run from our terminal. Before creating a new branch we need to run the `git pull` command to ensure that the master branch is up to date. Next we will need to run `git checkout -b [Name-of-new-branch]`. We can run `git push origin [Name-of-new-branch]` in order to push this back up to the repository. 

Now that we know how to create a new branch and make changes to our code confidently in our new branch, what do we do if we want to make sure Github saves these changes from our local environment? Great Question! After we created our new branch and made some changes we will want to save these changes to the actual repo we pulled the code from originally. This can be done by using a few commands in the terminal. First step is to make sure we are in the branch we want to commit to the repo. Next, we want to make sure we have saved ANY and all files that were changed in the application. Now lets run some commands and get our repo up to date on Github. First command we will want to run is ` git add .` this preps the application for a commit. Next we will want to run `git commit -m “here is where you will type a message describing what was changed”`. Finally we will want to run ` git push` to make sure everything is pushed to the original repository. A rule of thumb for new programmers is to commit early and often while working. Any time you are working on a project regardless if its is personal or for work ALWAYS make sure your repo is up to d date and any changes you make are always going to be pushed to github. This makes problem solving and debugging much easier since there will be a “trail of breadcrumbs” for yourself or other developers to follow. 

From my experience, lots of programmers throughout the entire world use Github on a regular day to day basis. I think it is imperative for any and all aspiring developers to familiarize themselves with the inner workings of Github so when the time comes to get a job and use these new skills you will be able to jump in with ease. I found myself needing a little guidance in understanding some of the basic commands that I would be using on a daily basis and now that I have a better understanding of how to use it I am confidently able to add, commit, and push on a daily basis. 

